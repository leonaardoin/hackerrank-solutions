function queensAttack(n, k, r_q, c_q, obstacles) {
    // Calculate the number of squares that the queen can attack in each direction

let up = n - r_q;
let right = n - c_q;
let down = r_q - 1;
let left = c_q - 1;

    // Calculate the number of squares that the queen can attack in each diagonal direction
let up_left = Math.min(up, left);
let up_right = n - Math.max(c_q, r_q);
let down_left = Math.min(c_q, r_q) - 1;
let down_right = Math.min(r_q - 1, n - c_q);

    // Iterate over the obstacles and update the number of squares that the queen can attack
for (let i of Array.from({ length: k }, (value, index) => index)) {
    let { 0: r_o, 1: c_o } = obstacles[i];

        // Update the number of squares that the queen can attack in the same row or column as an obstacle

    r_o == r_q &&
    (c_o > c_q
        ? (up = Math.min(up, c_o - c_q - 1))
        : (down = Math.min(down, c_q - c_o - 1)));

    c_o == c_q &&
    (r_o > r_q
        ? (right = Math.min(right, r_o - r_q - 1))
        : (left = Math.min(left, r_q - r_o - 1)));


        // Update the number of squares that the queen can attack in each diagonal direction

    Math.abs(c_o - c_q) == Math.abs(r_o - r_q) &&
    (c_o > c_q && r_o > r_q && (up_right = Math.min(up_right, c_o - c_q - 1)),
        c_o > c_q &&
        r_o < r_q &&
        (down_right = Math.min(down_right, c_o - c_q - 1)),
        c_o < c_q && r_o > r_q && (up_left = Math.min(up_left, c_q - c_o - 1)),
        c_o < c_q &&
        r_o < r_q &&
        (down_left = Math.min(down_left, c_q - c_o - 1)));
}

    // Return the total number of squares that the queen can attack

return right + left + up + down + down_left + up_left + down_right + up_right;
}
